INITIALISING WITH REACT-NATIVE CLIENT
    1. If cocoapods is already installed, skip, otherwise (sudo gem install cocoapods)
    2. Also do (sudo arch -x86_64 gem install ffi) either in same directory or the ios directory in step 6
    3. Do "npx react-native init YourProjectName" (cannot contain dashes)
    4. If cocapods dependencies fail, cd into ios folder, and run (arch -x86_64 pod install)
    5. Make sure the pwd is the root project then type (npx react-native start) -> this enables the watchman 
    6. In another terminal, type (npx react=native run-ios)

INITIALISING WITH EXPO (MUCH EASIER)
    1. If expo-cli not installed then do "sudo npm install -g expo-cli"
    2. Run "expo init projectName"
    3, cd into that, and run "npm start" to run the project


-------

TAGS
    - <View></View> -> Fundamental -> Allows flex       etc.. Essentially a div
    -  <Text></Text> -> Essentially a <p></p>
    - <TextInput></TextInput> -> Like input   
        - "defaultValue =" attribute sets the label of the textbox
    - <Image> -> Allows you to put an image
        - To add an image from internet:
            - <Image source = {{ uri : 'link' }}/>
        - To add image from folder:
            - <Image source = {require('path')}>
    - <ScrollView></ScrollView>
        - A scrollable 'div'
        - Can contain multiple components and views
        - Based on props, you can  
            - Enable horizontal scrolling
            - Enable zooming in and out by setting the maximumZoomScale and minimumZoomScale prop
            - You can even allow users to swipe page wise
            - Renders all data in, even those not in the screen, which is bad. 
            - Doesn't have structure to it as well.
            - If you have a long list of items which cannot fit on the screen, you should use a FlatList (since its more structured and renders in data only currently on the screen)
    - <FlatList></FlatList>
        - Good for long lists of data that could change
        - More structured
        - Renders in data on the screen
    - <SectionList/>
        - Essentially a flat list but in sections

PROPS
    - It is used to configure a component when it renders
    - You can use 'props' or any other word to refer to as properties, and then access that property from the original function to do something. It is essentially literally just an argument in an anonymous function which assumes a particular property. Eg: 
        const smth = (prop) => {
            return <Text>{prop.name}</Text>
        }
    - This then looks at an attribute called 'name' in the parent component
    - Props essentially means attribute
    - Props can be anything -> Eg: style, source etc.. 



STATE
    - They are like classes -> Used to keep track of component data that you expect to change over time
    - Do 2 things: create the variable (can be anything), and the function to set that variable:
        - const [isHungry, setHunger] = useState(true)
        - ^ Sets a boolean constant 'isHungry' to 'true' and creates a function to set that value
        - [<getter>, <setter>] = useState(<initialValue>)


HOOK
    - It is a kind of function that lets you 'hook into' React features.
    - Eg: useState -> hook that lets you add state to function components
-------

Anonymous functions to create react element:
    - function() {..}
    OR preferred:
    - () => {..}

To create a function to return a react element:
    const something = () => {
        return <Text>Hi</Text>;
    }
    // To export in
    export default something;


------------

METHODS

Map
    - someList.map((x) => 2 * x) 

Split
    - words.split(' ')

Join
    - list.join(' ')



------------


GENERAL

You can also do variables:
    const something = () => {
        const name = "Ryan";
        return (<Text>Hello, I am {name}!</Text>)
    }

Reason for double braces:
    If its a double brace, then the inner brace is for javascript elements / objects like style's width and height. Otherwise it could be taken in like a prop

Boolean Evaluator
    Note that "" means false, so if you have a variable like str, you can do (str && "hi")