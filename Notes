INITIALISING WITH REACT-NATIVE CLIENT
    1. If cocoapods is already installed, skip, otherwise (sudo gem install cocoapods)
    2. Also do (sudo arch -x86_64 gem install ffi) either in same directory or the ios directory in step 6
    3. Do "npx react-native init YourProjectName" (cannot contain dashes)
    4. If cocapods dependencies fail, cd into ios folder, and run (arch -x86_64 pod install)
    5. Make sure the pwd is the root project then type (npx react-native start) -> this enables the watchman 
    6. In another terminal, type (npx react=native run-ios)

INITIALISING WITH EXPO (MUCH EASIER)
    1. If expo-cli not installed then do "sudo npm install -g expo-cli"
    2. Run "expo init projectName"
    3, cd into that, and run "npm start" to run the project


-------

TAGS
    - <View></View> -> Fundamental -> Allows flex       etc.. Essentially a div
    -  <Text></Text> -> Essentially a <p></p>
    - <TextInput></TextInput> -> Like input   
        - "defaultValue =" attribute sets the label of the textbox
    - <Image> -> Allows you to put an image
        - To add an image from internet:
            - <Image source = {{ uri : 'link' }}/>
        - To add image from folder:
            - <Image source = {require('path')}>
    - <ScrollView></ScrollView>
        - You should wrap your scrollviews inside a normal view, because the scroll view will get its size from its parent. Hence, if you have a view that already has a fixed size, then scroll view will take up that space, otherwise the dimensions can get messed up.
        - A scrollable 'div'
        - Can contain multiple components and views
        - Based on props, you can  
            - Enable horizontal scrolling
            - Enable zooming in and out by setting the maximumZoomScale and minimumZoomScale prop
            - You can even allow users to swipe page wise
            - Renders all data in, even those not in the screen, which is bad. 
            - Doesn't have structure to it as well.
            !! If you have a long list of items which cannot fit on the screen, you should use a FlatList (since its more structured and renders in data only currently on the screen)
    - <FlatList></FlatList>
        - Good for long lists of data that could change
        - More structured
        - Renders in data on the screen
    - <SectionList/>
        - Essentially a flat list but in sections

PROPS
    - It is used to configure a component when it renders
    - You can use 'props' or any other word to refer to as properties, and then access that property from the original function to do something. It is essentially literally just an argument in an anonymous function which assumes a particular property. Eg: 
        const smth = (prop) => {
            return <Text>{prop.name}</Text>
        }
    - This then looks at an attribute called 'name' in the parent component
    - Props essentially means attribute
    - Props can be anything -> Eg: style, source etc.. 



STATE
    - They are like classes -> Used to keep track of component data that you expect to change over time
    - Do 2 things: create the variable (can be anything), and the function to set that variable:
        - const [isHungry, setHunger] = useState(true)
        - ^ Sets a boolean constant 'isHungry' to 'true' and creates a function to set that value
        - [<getter>, <setter>] = useState(<initialValue>)


HOOK
    - It is a kind of function that lets you 'hook into' React features.
    - Eg: useState -> hook that lets you add state to function components

DIFFERENT SCREENS
    - Add a folder called app, and shift the "assets" folder inside
    - Also inside the "app" folder, create a folder called 'screens'
    - In 'app.json', make sure to redirect any paths which go into './assets' to './app/assets'
    - Remember in each screen.js file, to 'export default name'
    - In your 'app.js' file in the root directory, you can 'import file from 'path/of/file'.
        - Note, you don't need to do 'path/of/file.js'


ADDING FILE FOR COMMON USED STUFF
    - You can create a 'config' folder in the 'app' folder and call it, eg, 'colors.js'
    - Then, inside, 'export default {name : color}' to set your keywords for whatever you want
    - Then from the file you want to use it from, you can do 'import colors from 'path/of/file'
    - You can even do this for functions, so 'export default functionName' and then import it in from another file
        - Then 'import functionName from "./path"
        - Then in your actual app, just do an anonymous function and do `return <functionName />`
        - To pass in data to that function, use props as an argument then add that prop to the func name. Eg: `return <functionName text="smth" />`
-------

Anonymous functions to create react element:
    - function() {..}
    OR preferred:
    - () => {..}

To create a function to return a react element:
    const something = () => {
        return <Text>Hi</Text>;
    }
    // To export in
    export default something;


------------

METHODS

Map
    - someList.map((x) => 2 * x) 

Split
    - words.split(' ')

Join
    - list.join(' ')



------------


GENERAL / MISTAKES

You can also do variables:
    const something = () => {
        const name = "Ryan";
        return (<Text>Hello, I am {name}!</Text>)
    }

Reason for double braces:
    If its a double brace, then the inner brace is for javascript elements / objects like style's width and height. Otherwise it could be taken in like a prop

Boolean Evaluator
    Note that "" means false, so if you have a variable like str, you can do (str && "hi")

Taking up the entire screen
    Note that if you do eg: a view component, it doesn't automatically take up the entire scre4en eg: if you want a background color. You have to do either width and height to 100 or just do flex: 1

Optional Components
    If you want a component, eg, a heading that says something if something is true, and not to have the component when it is false, then you can create a component: "const component = () => { .. }" and return whatever you want, eg: a <Text> if your var is true, otherwise "return null;" if its not true, then the component will be out of the way

Flat List not re-rendering
    - You will notice that the flatlist does not rerender if you do code with such syntax (eg: in Flatlist.js)
        function addToList() {
            cpy_todos = todos;
            cpy_todos.push(entered_text);
            setTodos(cpy_todos);
        }
    - This is because the list re renders when the actual state is updated.
    - Use setTodos([...todos, entered_text]) to set the 'todos' to the old todos + the new entered text