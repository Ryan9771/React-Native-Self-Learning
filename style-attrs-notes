STYLES:

    !! Note: Sometimes if stuff like eg: borderRadius doesn't apply for ios or android, then you can wrap 
        it inside a <View> component and apply the styles there

    !! It is important to note that unlike CSS, children don't inherit styles from parents. So eg: if you 
        have a View that has a color:white, then in your text component, you still need to have 
        your color set to white, otherwise itll just give black text

    General
        - height: 40 OR '40%'   
        - width: 40
        - padding: 10
        - paddingTop: 22
        - paddingLeft: 20
        - paddingHorizontal: 8
        - paddingVertical: 6
        - fontSize: 42
        - flex: 1
        - margin: 10
        - marginTop: 10
        - backgroundColor: 'skyblue'
        - direction: 'ltr' OR 'rtl'
        - alignSelf: "flex-start"
            - I assume this is for individual elements whereas justifyContent is for all boxes within itself
        - alignItems: center
            - Aligns items in the other axes (eg: vertical), whereas justify-content is more for the horizontal 
        - minWidth: "48%"
        - textAlign: "center"
        - marginHorizontal: "1%"
        - justifyContent: "flex-start" / "flex-end" / "center" / "space-between" / "space-around" / "space-evenly"
            ! Note: You can do this if the children don't have fixed size properties such as flex otherwise it'll just occupy the space
            !! Also remember to use this, you must have a flex: 1 otherwise the size will be undefined, and hence, no changes

    Border
        - borderColor: 'gray'
        - borderWidth: 1
        - borderTopColor: 'green'
        - borderTopWidth: 5
        - borderRadius: 4
            -> ! Note this may not apply do stuff like <Text> for ios. In that case, you'd need to wrap it in a View and apply the styling there


    Flex -> Makes the component expand shrink dynamically
        - flex: 1 -> fill all available space, shared evenly amongst other components with the same parent
            - Therefore, 'flex: 1' can even replace "width: '100%', height: '100%'"
            - if you have 3 children with flex1 flex2 flex3, then the first child (flex: 1) will have 1/(1+2+3) of the space
        - The larger the 'flex', the higher the ratio of space a component will take compared to its siblings
        ! Note that the parent must have a dimension greater than 0 (width, height > 0 or flex) otherwise no space for children to fit into
        - To make the parent have full size use 'flex: 1' (or height: '100%') so that it occupies the full length if there's only 1 sibling.
        - Note: It doesn't seem like you have to put flex on the outer box even if your children have flex. Flex is just saying to fill the entire container. So if the parent has a custom size, then you can't really put flex: 1

        STYLES
            - flex: 1
            - flexDirection: "column" OR "row" OR "column-reverse" OR "row-reverse"
            - flexWrap: "wrap"

    

ATTRIBUTES

🌏 Global
    - style

Button
    - onPress = { .. } // What to do when pressed. Can even put anonymous functions inside
    - disabled = { .. } // Whether to disable a button. Can put a boolean expression inside
    - title = { .. } // The label of the button 

Image 
    - source = { require('thePath') } // Relative path to image
    - source = {{ uri : 'web link' }} // Web image

TextInput
    - placeholder = 'Text that appears before typing'
    - onChangeText = { newText => function(newText) } // function that does something with the new text as the user types
    - defaultValue = { .. } // The default value of the textfield (not label)
    - value = { .. } // The actual value of the text field. Useful if you want to clear text of an input field after clicking enter or smth

FlatList
    - data = { .. } -> source of information for the list 
    - renderItem = { .. } -> takes one item from the source and returns a formatted component to render 
        ! Note that the anonymous function returns an object. So to get the individual item in the list, you must use the 'itemData.item' attribute 
        ! You can also use object destructuring by doing {({item}) => ..} instead of {(item) => item.item}
    - keyExtractor = { .. }
        ! Note that the anonymous function for this directly returns the item instead of the object so you can refer to it directly

SectionList
    - sections={[ .. ]}
        - {title: 'D'
        - data: [..]}
    - renderItem={ .. }
    - renderSectionHeader={ .. }
    - keyExtractor={ .. } -> Essentially just a key to give the item. You can make it anything you want (refer to the docs or App.js to see)

Modal
    - isVisible={}
    - animationType="slide" or "fade" or "none"
